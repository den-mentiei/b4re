#!/usr/bin/env python

import sys
import glob
import pystache

TEMPLATE = r"""// It is autogenerated! :)

typedef struct {
	const char* name;
	const char* texture_path;

	bgfx_texture_handle_t h;
} sprite_t;

// TODO:

"""

GROUP_INIT_TEMPLATE = r""".{{name}} = {
    .name = "{{name}}",
    {{#sprites}}
    .{{name}} = { "{{name}}", "{{path}}" },
    {{/sprites}}
	{{#groups}}
    {{> group_init}}
	{{/groups}}
},
"""

GROUP_DECL_TEMPLATE = r"""struct {
    const char* name;
    {{#sprites}}
    sprite_t {{name}};
    {{/sprites}}
    {{#groups}}
	{{> group_decl}}
    {{/groups}}
} {{name}};
"""

GROUP_LOAD_TEMPLATE = r""".{{name}} = {
    .name = "{{name}}",
    {{#sprites}}
    .{{name}} = load("{{name}}", "{{path}}"),
    {{/sprites}}
    {{#groups}}
    {{> group_load}}
    {{/groups}}
},
"""

HEADER_TEMPLATE = r"""#pragma once

// It is auto-generated :)

typedef struct {
    {{#groups}}
	{{> group_decl}}
    {{/groups}}
} sprites_t;

void assets_init();
void assets_shutdown();

const sprite_t* assets_sprites();
"""

IMPLEMENTATION_TEMPLATE = r"""//It is auto-generated :)

#include "assets.h"

static sprites_t s_sprites;

static bgfx_texture_handle_t load(const char* name, const char* path) {
    // TODO:
}

void assets_init() {
    s_sprites = {
    {{#groups}}
        {{> group_load}}
    {{/groups}}
    };
}

void assets_shutdown() {
    // TODO:
}
"""

PARTIALS = {
	'group_decl': GROUP_DECL_TEMPLATE,
	'group_init': GROUP_INIT_TEMPLATE,
	'group_load': GROUP_LOAD_TEMPLATE,
}

TEST_DATA = {
	'name': 's_root',
	'groups': [
		{ 'name': 'subgroup1', 'groups': None, 'sprites': [] },
		{ 'name': 'subgroup2', 'groups': None, 'sprites': [ {'name': 'rs1', 'path': 'p-rs1'} ] },
		{
			'name': 'subgroup3',
			'groups': [
				{
					'name': 'nested',
					'groups': None,
					'sprites': [
						{'name': 's1', 'path': 'p-s1'},
						{'name': 's2', 'path': 'p-s2'},
						{'name': 's3', 'path': 'p-s3'},
					]
				}
			]
		},
	],
}

def find_assets():
	return glob.glob('assets/**/*.png', recursive=True)

def main():
	# print(chr(27) + "[2J")
	# if len(sys.argv) != 2:
	# 	raise Exception('pass an argument that is a directory name to scan for assets in')
	# assets = find_assets()
	# print(assets)

	r = pystache.Renderer(partials=PARTIALS)
	with open('assets.h', 'w') as f:
		f.write(r.render(HEADER_TEMPLATE, TEST_DATA))
	with open('assets.c', 'w') as f:
		f.write(r.render(IMPLEMENTATION_TEMPLATE, TEST_DATA))
	# print(r.render(HEADER_TEMPLATE, TEST_DATA))
	# print(r.render(IMPLEMENTATION_TEMPLATE, TEST_DATA))

if __name__ == '__main__':
	main()
